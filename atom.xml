<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blaceman</title>
  <subtitle>懵懂 前进 憧憬</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blaceman.github.io/"/>
  <updated>2017-01-03T03:49:37.000Z</updated>
  <id>https://blaceman.github.io/</id>
  
  <author>
    <name>blaceman</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS 宏定义</title>
    <link href="https://blaceman.github.io/2017/01/03/iOS-%E5%AE%8F%E5%AE%9A%E4%B9%89/"/>
    <id>https://blaceman.github.io/2017/01/03/iOS-宏定义/</id>
    <published>2017-01-03T03:49:37.000Z</published>
    <updated>2017-01-03T03:49:37.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>wifi密码破解</title>
    <link href="https://blaceman.github.io/2016/12/29/wifi%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    <id>https://blaceman.github.io/2016/12/29/wifi密码破解/</id>
    <published>2016-12-29T05:54:23.000Z</published>
    <updated>2017-01-05T10:18:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>那天回了老家,没有网络,真是回归自然~今天就来说说mac电脑如何如何破解wifi~让没有网络的你,可以偷别人家的wifi,想想就激动~</p>
<h5 id="首先来首歌"><a href="#首先来首歌" class="headerlink" title="首先来首歌"></a>首先来首歌</h5><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="https://music.163.com/outchain/player?type=2&id=116352&auto=1&height=66"></iframe>


<h3 id="文章说了以下几个方面"><a href="#文章说了以下几个方面" class="headerlink" title="文章说了以下几个方面"></a>文章说了以下几个方面</h3><ul>
<li>安装aircrack</li>
<li>利用aircrack 进行wifi抓包</li>
<li>配合字典开始wifi破解</li>
</ul>
<h3 id="安装aircrack"><a href="#安装aircrack" class="headerlink" title="安装aircrack"></a>安装aircrack</h3><h5 id="1-首先安装homebrew"><a href="#1-首先安装homebrew" class="headerlink" title="1.首先安装homebrew"></a>1.首先安装homebrew</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>
<h5 id="2-用homebrew安装aircrack"><a href="#2-用homebrew安装aircrack" class="headerlink" title="2.用homebrew安装aircrack"></a>2.用homebrew安装aircrack</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install aircrack-ng</div></pre></td></tr></table></figure>
<h3 id="利用aircrack-进行wifi抓包"><a href="#利用aircrack-进行wifi抓包" class="headerlink" title="利用aircrack 进行wifi抓包"></a>利用aircrack 进行wifi抓包</h3><h5 id="1-airport-监测到的附近-wifi-信息"><a href="#1-airport-监测到的附近-wifi-信息" class="headerlink" title="1.airport 监测到的附近 wifi 信息"></a>1.airport 监测到的附近 wifi 信息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">airport -s</div></pre></td></tr></table></figure>
<p>然后就能看到一下的信息</p>
<p><img src="1.png" alt="wifi"></p>
<p>SSID 是 wifi名称，RSSI 是信号强度，CHANNEL 是信道。</p>
<h5 id="2-接着挑一个信号强的进行抓包"><a href="#2-接着挑一个信号强的进行抓包" class="headerlink" title="2.接着挑一个信号强的进行抓包"></a>2.接着挑一个信号强的进行抓包</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo airport en1 sniff  1</div></pre></td></tr></table></figure>
<p>其中en1是电脑的网卡,大部分就是en1 或en0,等待几分钟~</p>
<h5 id="3-接着前往-tmp文件夹查看生成后缀为-cap的包-然后再桌面新建一个文件夹-假设我新建的文件夹名字为wifi-把抓到的后缀-cap的问价放进文件夹里面-重新命名为01-cap"><a href="#3-接着前往-tmp文件夹查看生成后缀为-cap的包-然后再桌面新建一个文件夹-假设我新建的文件夹名字为wifi-把抓到的后缀-cap的问价放进文件夹里面-重新命名为01-cap" class="headerlink" title="3.接着前往/tmp文件夹查看生成后缀为.cap的包,然后再桌面新建一个文件夹(假设我新建的文件夹名字为wifi),把抓到的后缀.cap的问价放进文件夹里面,重新命名为01.cap."></a>3.接着前往<code>/tmp</code>文件夹查看生成后缀为.cap的包,然后再桌面新建一个文件夹(假设我新建的文件夹名字为wifi),把抓到的后缀.cap的问价放进文件夹里面,重新命名为01.cap.</h5><h3 id="配合字典开始wifi破解"><a href="#配合字典开始wifi破解" class="headerlink" title="配合字典开始wifi破解"></a>配合字典开始wifi破解</h3><h5 id="1-谷歌-百度-找到密码字典"><a href="#1-谷歌-百度-找到密码字典" class="headerlink" title="1.谷歌(百度)找到密码字典"></a>1.谷歌(百度)找到密码字典</h5><h5 id="2-把字典也放进上述所创建的wifi文件夹中-重命名为01-text"><a href="#2-把字典也放进上述所创建的wifi文件夹中-重命名为01-text" class="headerlink" title="2.把字典也放进上述所创建的wifi文件夹中,重命名为01.text"></a>2.把字典也放进上述所创建的wifi文件夹中,重命名为01.text</h5><h5 id="3-终端cd-到这个文件夹里-然后查看wifi抓包情况"><a href="#3-终端cd-到这个文件夹里-然后查看wifi抓包情况" class="headerlink" title="3.终端cd 到这个文件夹里,然后查看wifi抓包情况"></a>3.终端cd 到这个文件夹里,然后查看wifi抓包情况</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/Desktop/wifi</div><div class="line">aircrack-ng -w 01.txt 01.cap</div></pre></td></tr></table></figure>
<p><img src="4.png" alt="4"></p>
<p>其中,Encryption中（0 handshake）是抓包失败，（1 handshake）则是抓包成功。看到第几行抓包成功，则在「Index number of target network ?」后敲回车：第几行 例如11</p>
<p>如果cap文件内全是（0 handshake），就按 command + c 组合键退出。重新回到「sudo airport en1 sniff 1」这步进行监听抓包。抓包成功率受到 wifi 信号强弱、电脑与路由器距离远近、路由器是否正处在收发数据状态的影响。总之多试几次、监听时间适当延长些，可以大大提高成功率。</p>
<p>如果可以的话,会进入</p>
<p><img src="2.png" alt="2"></p>
<p>接下来等待破解结果就行了，中断破解过程可以直接按 command + c 组合键退出。破解过程所需时间长短受电脑硬件配置、字典体积大小的影响。如果01.txt字典破解失败，则可以换其它字典进行破解，直到破解成功。<br>使用一个好的字典是很重要的，一个9位的纯数字字典大概1G多，结果经过几个小时的破解，如果密码是987654321就很令人郁闷了，所以最好准备几个常用的wifi密码字典，可以大大提高成功率和节省时间。常用字典可以直接百度Google搜索下载。</p>
<p>如果成功了就会出现</p>
<p><img src="3.jpg" alt="3"></p>
<p>然而我却一直卡在抓包那里,一直没成功过,心塞~</p>
<p>主要参考是<a href="http://chaishiwei.com/blog/562.html" target="_blank" rel="external">这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;那天回了老家,没有网络,真是回归自然~今天就来说说mac电脑如何如何破解wifi~让没有网络的你,可以偷别人家的wifi,想想就激动~&lt;/p&gt;
&lt;h5 id=&quot;首先来首歌&quot;&gt;&lt;a href=&quot;#首先来首歌&quot; class=&quot;headerlink&quot; title=&quot;首先来首歌&quot;&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>说说Object-C Runtime</title>
    <link href="https://blaceman.github.io/2016/12/15/%E8%AF%B4%E8%AF%B4Object-C-Runtime/"/>
    <id>https://blaceman.github.io/2016/12/15/说说Object-C-Runtime/</id>
    <published>2016-12-15T04:49:58.000Z</published>
    <updated>2016-12-27T06:50:53.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="今天照着文档来说说runtime-看到一半看不下去了-怪自己英文不好-…先写下来慢慢理解-然后在看下半部分"><a href="#今天照着文档来说说runtime-看到一半看不下去了-怪自己英文不好-…先写下来慢慢理解-然后在看下半部分" class="headerlink" title="今天照着文档来说说runtime,看到一半看不下去了(怪自己英文不好)…先写下来慢慢理解,然后在看下半部分~"></a>今天照着文档来说说runtime,看到一半看不下去了(怪自己英文不好)…先写下来慢慢理解,然后在看下半部分~</h5><p>首先还是来首歌</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="https://music.163.com/outchain/player?type=2&id= 234252&auto=1&height=66"></iframe>

<p>还是建议大家看<a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048-CH1-SW1" target="_blank" rel="external">官方文档</a></p>
<p>不想看文档的朋友,推荐一篇比较好的<a href="http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/" target="_blank" rel="external">博客</a></p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Object-C 语言延迟了许多从编译链接到运行时的许多决策,尽可能让这门语言动态化.这就意味着这门语言仅需要编译器是不够的,还需要运行系统来执行编译代码.运行时系统作为Object-C语言的操作系统,使它工作.</p>
<p>文档大概说了NSObject class和Object-C程序如何runtime系统进行交互.尤其是检查动态加载新类,和消息转发给其它对象的范式.文档还提供一些有关于运行时你的程序怎么寻找一些有关对象的information</p>
<p>读这篇文章,你该明白Object-C runtime 系统怎样工作和可以如何利用它.一般情况下,就算你不了解它,也不影响你编写的应用程序.</p>
<h5 id="文档目录"><a href="#文档目录" class="headerlink" title="文档目录"></a>文档目录</h5><p>这篇文章有以下章节</p>
<ul>
<li>Runtime Versions and Platforms(运行时版本与平台)</li>
<li>Interacting with the Runtime(与运行时交互)</li>
<li>Messaging(消息)</li>
<li>Dynamic Method Resolution(动态方法解析)</li>
<li>Message Forwarding(消息转发)</li>
<li>Type Encodings(类型编码)</li>
<li>Declared Properties(声明属性)</li>
</ul>
<h5 id="也可以参考"><a href="#也可以参考" class="headerlink" title="也可以参考"></a>也可以参考</h5><p><a href="https://developer.apple.com/reference/objectivec/1657527-objective_c_runtime" target="_blank" rel="external">Objective-C Runtime Reference</a>描述运行时支持库的数据结构和函数.你的程序可以使用这些和Object-C runtime系统进行交互.例如,你可以增加一些类和方法或者获得加载类的所有类定义列表</p>
<p><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011210" target="_blank" rel="external">Programming with Objective-C</a>描述了Object-C语言</p>
<p><a href="https://developer.apple.com/library/content/releasenotes/Cocoa/RN-ObjectiveC/index.html#//apple_ref/doc/uid/TP40004309" target="_blank" rel="external">Objective-C Release Notes</a>描述了Object-C 运行时在最近OS X版本的一些变化</p>
<h3 id="Runtime-Versions-and-Platforms-运行时版本与平台"><a href="#Runtime-Versions-and-Platforms-运行时版本与平台" class="headerlink" title="Runtime Versions and Platforms(运行时版本与平台)"></a>Runtime Versions and Platforms(运行时版本与平台)</h3><p>在不同的平台中有不同的Object-C runtime 版本.</p>
<h5 id="Legacy-and-Modern-Versions-过时与现在版本"><a href="#Legacy-and-Modern-Versions-过时与现在版本" class="headerlink" title="Legacy and Modern Versions(过时与现在版本)"></a>Legacy and Modern Versions(过时与现在版本)</h5><p>在Object-C中有两个runtime版本,分别是”modern”(现在)和”legacy”(过时).modern版本是从Object-C 2.0开始到现在.Objective-C 1运行时参考中描述了运行时的legacy版本的编程接口;现在的Object-C运行时参考中描述了运行时的modern版本的编程接口.</p>
<p>modern运行时最显著的新特征是实例变量是”non-fragile”(非脆)</p>
<ul>
<li>在legacy runtime,如果你在类中改变了实例变量的布局,你必须重新编译继承于它的类</li>
<li>在modern runtime,则不需要</li>
</ul>
<h5 id="Platforms-平台"><a href="#Platforms-平台" class="headerlink" title="Platforms(平台)"></a>Platforms(平台)</h5><p>iPhone 应用程序和在OS X v10.5和以后的64-bit 使用modern 运行时版本.其它则使用legacy运行时版本.</p>
<h3 id="Interacting-with-the-Runtime-与运行时交互"><a href="#Interacting-with-the-Runtime-与运行时交互" class="headerlink" title="Interacting with the Runtime(与运行时交互)"></a>Interacting with the Runtime(与运行时交互)</h3><p>Object-C编程与运行时系统交互主要是以下三个方面:1.通过Object源代码,通过NSObject类方法和直接通过runttime函数</p>
<h5 id="Objective-C-Source-Code-Objective-c-源代码"><a href="#Objective-C-Source-Code-Objective-c-源代码" class="headerlink" title="Objective-C Source Code(Objective-c 源代码)"></a>Objective-C Source Code(Objective-c 源代码)</h5><p>大多数情况下,runtime系统通过自动的在幕后工作.你只需要写和编译Object-C源代码即可.</p>
<p>当你编译包含Object类和方法代码时,编译器会创建实现这门语言的动态特性的数据结构和函数调用.数据结构会捕获关于类、类别定义和协议声明的信息;包括在Object-C编程语言中定义类和协议中类和协议对象,也包括方法选择器(method selector)实例变量模板,和其它从源代码提取的信息.运行时最主要的是消息发送,像消息的描述.它由源代码表达式发送.</p>
<h5 id="NSObject-Methods-NSObject-方法"><a href="#NSObject-Methods-NSObject-方法" class="headerlink" title="NSObject Methods(NSObject 方法)"></a>NSObject Methods(NSObject 方法)</h5><p>在Cocoa中大部分对象是NSObject子类,所以大部分对象是继承它定义的方法(NSProxy例外),因此建立了每个实例和每个对象固有的行为.然而，在少数情况下，NSObject类只定义了一个模板，用于如何做一些事情; 它不提供所有必要的代码.</p>
<p>例如,NSObject 类定义了一个description 返回字符串描述类内容实例方法.这主要用于调试 -这个CDB print-object命令打印字符串从这个方法返回.这个方法的NSObject’s实现,不知道这个类包含什么内容,所以他返回一个对象名字和地址的字符串.Object子类可以可以实现这个方法来返回更多的细节.例如，Foundation类NSArray返回它包含的对象的描述列表.</p>
<p>一些NSObject方法只是查询运行时系统的信息,这些方法允许对象执行自省.例如一些类方法,要求识别其类;<code>isKindOfClass:</code>和<code>isMemberOfClass:</code>测试对象在继承层次结构中的位置;<code>respondsToSelector:</code>指示对象是否可以接受特定消息;<code>conformsToProtocol:</code>指示对象是否宣称去实现在特定的协议中被定义的方法和<code>methodForSelector:</code>提供一个方法实现的地址.等能够自省的方法.</p>
<h5 id="Runtime-Functions-运行时函数"><a href="#Runtime-Functions-运行时函数" class="headerlink" title="Runtime Functions(运行时函数)"></a>Runtime Functions(运行时函数)</h5><p>运行时系统是一个动态共享库，其公共接口由位于目录/ usr / include / objc中的头文件中的一组函数和数据结构组成。 许多这些函数允许你使用纯C来重新使用编译器在编写Objective-C代码时所做的工作。 其他通过NSObject类的方法导出的功能的基础。 这些功能使得可以开发到运行时系统的其他接口，并产生增强开发环境的工具; 当在Objective-C中编程时不需要它们。 但是，编写Objective-C程序时，一些运行时函数有时会很有用。 所有这些函数都记录在<a href="https://developer.apple.com/reference/objectivec/1657527-objective_c_runtime" target="_blank" rel="external">Objective-C Runtime Reference.</a>。</p>
<h3 id="Messaging-消息"><a href="#Messaging-消息" class="headerlink" title="Messaging(消息)"></a>Messaging(消息)</h3><p>本章节描述的是如何将信息表达式转化为obj_msgSend函数调用,以及怎样按名称查找方法.怎样利用object_msgSend和怎样绕过动态绑定.</p>
<h5 id="The-objc-msgSend-Function-objc-msgSend函数"><a href="#The-objc-msgSend-Function-objc-msgSend函数" class="headerlink" title="The objc_msgSend Function(objc_msgSend函数)"></a>The objc_msgSend Function(objc_msgSend函数)</h5><p>在Objective-C中，消息在运行时之前不绑定到方法实现.编译器转换消息表达式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[receiver message]</div></pre></td></tr></table></figure>
<p>转成换objc_msgSend消息函数,这个函数有接收者和被提到的方法名称-就是selector函数,作为主要的两个参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objec_msgSend(receiver,selector)</div></pre></td></tr></table></figure>
<p>在消息传递中,参数也是通过也是传递给objc_msgSend</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objc_msgSend(receiver, selector, arg1, arg2, ...)</div></pre></td></tr></table></figure>
<p>消息传递函数为动态绑定做任何事情</p>
<ul>
<li>首先找到selector的引用过程(方法的实现),相同的方法可以被不同的类实现,其精确查找依赖于receiver的类</li>
<li>然后它调用该过程，将其传递给接收对象（指向其数据的指针）以及为该方法指定的任何参数</li>
<li>最后，它传递过程的返回值作为它自己的返回值</li>
</ul>
<p>注意：编译器生成对消息传递函数的调用。 你不应该直接在你写的代码中调用它。</p>
<p>消息转发的关键在于编译器为每个类和对象构建结构。 每个类结构包括这两个基本元素：</p>
<ul>
<li>指向超类的指针。</li>
<li>类调度表。 此表具有将方法选择器与其标识的方法的类特定地址相关联的条目。 setOrigin ::方法的选择器与（实现的过程）setOrigin ::的地址相关联，显示方法的选择器与显示地址相关联，依此类推。</li>
</ul>
<p>创建新对象时，将分配其内存，并初始化其实例变量。 第一个对象的变量是一个指向它的类结构的指针。 这个指针，称为isa，给对象访问它的类，并通过类，到它继承的所有类。</p>
<p><img src="messaging1.gif" alt="message"></p>
<p>当消息发送給对象,这个消息转发函数会随着对象的isa指针到调度表寻找的方法选择器(selector)类结构.如果没有发现selector,objc_msgSend会随着指针到超类调度表寻找selector,直到NSObject.一旦找到selector,就进入表调用这个方法和传递它给接收对象的数据结构</p>
<p>这就是方法runtime方法实现的方式,或者用术语来说,方法动态绑定.</p>
<p>为了加快消息转发的过程,当它们被调用,运行时系统缓存了selector和方法的地址.而且为每个类分开做缓存.它包含继承的的方法和在类中定义的方法.在查找总调度表之前,首先查找缓存调度表.如果是在缓存找到selector,消息转发仅比函数调用略微耗时.</p>
<h5 id="Using-Hidden-Argument-使用隐藏参数"><a href="#Using-Hidden-Argument-使用隐藏参数" class="headerlink" title="Using Hidden Argument(使用隐藏参数)"></a>Using Hidden Argument(使用隐藏参数)</h5><p>在消息转发中,当objc_msgSend找到方法实现的过程,它会调用这个过程和传递它所有的参数,它也传递两个隐藏的参数:</p>
<ul>
<li>接收对象</li>
<li>方法选择器</li>
</ul>
<p>这些参数给有关引用这两个信息表达式的每一个方法实现详细的信息.它们称之为”hidden”(隐藏)是因为在方法定义的源代码没有声明.它们在代码被编译的时候被插入到实现中.</p>
<p>尽管这些参数没有明确的声明,源代码仍然可以引用它们(仅能引用接受对象的实例变量).方法引用接收对象称为self,和用用它自己的selector称为_cmd.在下面就例子中,_cmd引用了strange方法,self引用收到strange消息的对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- strange</div><div class="line">&#123;</div><div class="line">    id  target = getTheReceiver();</div><div class="line">    SEL method = getTheMethod();</div><div class="line"> </div><div class="line">    if ( target == self || method == _cmd )</div><div class="line">        return nil;</div><div class="line">    return [target performSelector:method];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>self是更有用的参数,事实上,接收对象的实例变量是可以获得方法的定义.</p>
<h5 id="Getting-a-Method-Address-获得方法地址"><a href="#Getting-a-Method-Address-获得方法地址" class="headerlink" title="Getting a Method Address(获得方法地址)"></a>Getting a Method Address(获得方法地址)</h5><p>规避动态绑定的唯一方法是获取方法的地址，并直接调用它，就像它是一个函数。 这在极少情况下可能是适当的，当特定方法将被连续执行多次，并且希望避免每次执行该方法时消息的开销。</p>
<p>使用NSObject类<code>methodForSelector</code>中定义的方法，可以要求指向实现方法的过程的指针，然后使用指针调用过程. <code>methodForSelector：</code>返回的指针必须小心地转换为正确的函数类型。 返回和参数类型都应包含在转换中。</p>
<p>下面的示例显示了如何调用实现setFilled：方法的过程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">void (*setter)(id, SEL, BOOL);</div><div class="line">int i;</div><div class="line"> </div><div class="line">setter = (void (*)(id, SEL, BOOL))[target</div><div class="line">    methodForSelector:@selector(setFilled:)];</div><div class="line">for ( i = 0 ; i &lt; 1000 ; i++ )</div><div class="line">    setter(targetList[i], @selector(setFilled:), YES);</div></pre></td></tr></table></figure>
<p>传递给过程的前两个参数是接收对象（self）和方法选择器（_cmd）。 这些参数隐藏在方法语法中，但是当方法作为函数调用时必须显式。</p>
<p>使用methodForSelector：规避动态绑定可以节省消息传递所需的大部分时间。 然而，仅当特定消息被重复多次时，节省将是显着的，如在上面所示的for循环中。</p>
<p>注意，methodForSelector：由Cocoa运行时系统提供; 它不是Objective-C语言本身的一个特性。</p>
<h3 id="Dynamic-Method-Resolution-动态派发"><a href="#Dynamic-Method-Resolution-动态派发" class="headerlink" title="Dynamic Method Resolution(动态派发)"></a>Dynamic Method Resolution(动态派发)</h3><p>本章介绍如何动态提供方法的实现。</p>
<h5 id="Dynamic-Method-Resolution-动态派发-1"><a href="#Dynamic-Method-Resolution-动态派发-1" class="headerlink" title="Dynamic Method Resolution (动态派发)"></a>Dynamic Method Resolution (动态派发)</h5><p>某些情况下，您可能需要动态提供方法的实现。 例如，Objective-C声明的属性特性,包括@dynamic指令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@dynamic propertyName;</div></pre></td></tr></table></figure>
<p>它告诉编译器与属性相关联的方法将被动态提供。</p>
<p>您可以实现方法<code>resolveInstanceMethod：</code>和<code>resolveClassMethod：</code>分别为实例和类方法动态提供给定选择器的实现。</p>
<p>Objective-C方法只是一个C函数，至少需要两个参数 - self和_cmd。 您可以使用函数class_addMethod将函数添加到类作为方法。 因此，给定以下函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">void dynamicMethodIMP(id self, SEL _cmd) &#123;</div><div class="line">    // implementation ....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你可以使用<code>resolveInstanceMethod</code>动态地将它添加到一个类作为一个方法（称为resolveThisMethodDynamically）：像这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@implementation MyClass</div><div class="line">+ (BOOL)resolveInstanceMethod:(SEL)aSEL</div><div class="line">&#123;</div><div class="line">    if (aSEL == @selector(resolveThisMethodDynamically)) &#123;</div><div class="line">          class_addMethod([self class], aSEL, (IMP) dynamicMethodIMP, &quot;v@:&quot;);</div><div class="line">          return YES;</div><div class="line">    &#125;</div><div class="line">    return [super resolveInstanceMethod:aSEL];</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>转发方法（如消息转发描述）和动态方法解析是，在很大程度上，正交。 类有机会在转发机制开始之前动态地解析方法。如果调用了<code>responsesToSelector：</code>或<code>instancesRespondToSelector：</code>，动态方法解析器被给予为选择器提供IMP的机会。 如果实现<code>resolveInstanceMethod：</code>但希望特定的选择器实际上通过转发机制转发，则对这些选择器返回NO。</p>
<h5 id="Dynamic-Loading-动态加载"><a href="#Dynamic-Loading-动态加载" class="headerlink" title="Dynamic Loading(动态加载)"></a>Dynamic Loading(动态加载)</h5><p>Objective-C程序可以在运行时加载和链接新的类和类别。新代码被合并到程序中，并且与开始时加载的类和类别完全相同。</p>
<p>动态加载可以用来做很多不同的事情。例如，系统首选项应用程序中的各个模块都是动态加载的。</p>
<p>在Cocoa环境中，通常使用动态加载来允许自定义应用程序。其他人可以编写程序在运行时加载的模块，就像Interface Builder加载自定义调色板和OS X系统首选项应用程序加载自定义首选项模块一样。可加载模块扩展了应用程序可以做什么。他们以你允许，但不能预期或定义自己的方式贡献它。你提供的框架，但其他人提供的代码。</p>
<p>虽然有一个运行时函数在Mach-O文件（objc_loadModules，在objc / objc-load.h中定义）中执行Objective-C模块的动态加载，Cocoa的NSBundle类为动态加载提供了一个非常方便的界面 - 定向和集成相关服务。有关NSBundle类及其使用的信息，请参阅Foundation框架参考中的NSBundle类规范。有关Mach-O文件的信息，请参见OS X ABI Mach-O文件格式参考</p>
<h3 id="Messag-Forwarding-消息转发"><a href="#Messag-Forwarding-消息转发" class="headerlink" title="Messag Forwarding(消息转发)"></a>Messag Forwarding(消息转发)</h3><p>向不处理该消息的对象发送消息是一个错误。 然而，在报错之前，运行时系统给接收对象第二次处理消息的机会。</p>
<h5 id="Forwarding-转发"><a href="#Forwarding-转发" class="headerlink" title="Forwarding(转发)"></a>Forwarding(转发)</h5><p>如果您向不处理该消息的对象发送消息，则在发布错误之前，运行时将对象发送一个<code>forwardInvocation：</code>消息，并将<code>NSInvocation</code>对象作为其唯一参数，NSInvocation对象封装原始消息和传递的参数。</p>
<p>您可以实现<code>forwardInvocation</code>方法以给予消息默认响应，或以某种其他方式避免错误。顾名思义，<code>forwardInvocation：</code>通常用于将消息转发到另一个对象。</p>
<p>想要看看转发的范围和意图，想象以下场景：假设，首先，你设计一个对象，可以响应一个消息，称为<code>negotiate</code>，并且你想要另一对象的响应。你可以通过传递一个<code>negotiate</code>消息到你实现的<code>negotiate</code>方法的主体中的其他对象轻松地实现这一点。</p>
<p>再进一步，假设您希望对象对协商消息的响应正是在另一个类中实现的响应。实现这一点的一种方法是让你的类从另一个类继承该方法。但是，可能不可能这样安排。可能有很好的理由为什么你的类和实现协商的类在继承层次结构的不同分支。</p>
<p>即使你的类不能继承negotiate方法，你仍然可以通过实现一个版本的方法，只是将消息传递给另一个类的实例“借”它：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (id)negotiate</div><div class="line">&#123;</div><div class="line">    if ( [someOtherObject respondsTo:@selector(negotiate)] )</div><div class="line">        return [someOtherObject negotiate];</div><div class="line">    return self;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种做事的方式可能会有点麻烦，特别是如果有一些消息，你想让你的对象传递给另一个对象。你必须实现一个方法来覆盖你想从另一个类借用的每个方法。此外，它是不可能处理的情况下，你不知道，在你写代码的时候，你可能要转发的完整的消息集。该集合可能取决于运行时的事件，并且可能随着新方法和类在将来实现而改变。</p>
<p><code>forwardInvocation：</code>message提供的第二次机会为这个问题提供了一个不太特别的解决方案，动态解决的而不是静态的。它的工作原理是这样的：当对象不能响应消息，因为它没有匹配消息中的选择器的方法，运行时系统通过发送一个<code>forwardInvocation：</code>消息通知对象。每个对象从NSObject类继承<code>forwardInvocation：</code>方法。然而，NSObject的版本的方法只是调用doesNotRecognizeSelector：。通过重写NSObject的版本并实现自己的，你可以利用<code>forwardInvocation：</code>message提供的将消息转发给其他对象的机会。</p>
<p>要转发消息，所有forwardInvocation：方法需要做的是：</p>
<ul>
<li>确定消息应该到哪里，和</li>
<li>发送它的原始参数。</li>
</ul>
<p>消息可以使用<code>invokeWithTarget：</code>方法发送：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (void)forwardInvocation:(NSInvocation *)anInvocation</div><div class="line">&#123;</div><div class="line">    if ([someOtherObject respondsToSelector:</div><div class="line">            [anInvocation selector]])</div><div class="line">        [anInvocation invokeWithTarget:someOtherObject];</div><div class="line">    else</div><div class="line">        [super forwardInvocation:anInvocation];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>被转发消息的返回值被返回到原来的Sender(发送发),所有类型的返回值都可以传递给发送方，包括ids，double和双精度浮点数。</p>
<p><code>forwardInvocation：</code>方法可以充当未识别消息的分发中心，将它们分解到不同的接收方。 或者它可以是转移站，将所有消息发送到相同的目的地。 它可以将一个消息转换为另一个消息，或者简单地“吞下”一些消息，所以没有响应和没有错误。 <code>forwardInvocation：</code>方法还可以将多个消息合并为单个响应。 <code>forwardInvocation：</code>做的事情给实现者。 然而，它提供用于在转发链中链接对象的机会为程序设计打开了可能性。</p>
<p>注意：<code>forwardInvocation：</code>方法仅在它们不调用名义接收器中的现有方法时才处理消息。 例如，如果您希望对象将negotiate消息转发给另一个对象，则它不能具有自己的negotiate方法。 如果有，消息将永远不会到达<code>forwardInvocation：</code>。<br>有关转发和调用的更多信息，请参阅Foundation框架参考中的NSInvocation类规范。</p>
<h5 id="Forwarding-and-Multiple-Inheritance-转发和多继承"><a href="#Forwarding-and-Multiple-Inheritance-转发和多继承" class="headerlink" title="Forwarding and Multiple Inheritance(转发和多继承)"></a>Forwarding and Multiple Inheritance(转发和多继承)</h5><p>转发模拟继承，可用于将多重继承的一些影响借给Objective-C程序，通过转发消息来响应消息的对象似乎借用或“继承”另一个类中定义的方法实现。</p>
<p><img src="forwarding.gif" alt="forwarding"></p>
<p>在此图中，Warrior类的实例将negotiate消息转发到Diplomat类的实例。Warrior就像像Diplomat调用negotiate。Warrior似乎对negotiate的信息作出反应，并且为了所有实际目做出回应（它就像真的是一个Diplomat(外交官)，正在做的工作）。</p>
<p>转发消息的对象因此从继承层次结构的两个分支“继承”方法 - 它自己的分支和响应消息的对象的分支。在上面的例子中，Warrior类继承自Diplomat以及它自己的超类。</p>
<p>转发提供了您通常希望从多重继承的大多数功能。但是，这两者之间有一个重要的区别：多重继承将单个对象中的不同能力组合在一起。它倾向于大，多面的对象。另一方面，转发为不同的对象分配单独的职责。它将问题分解为较小的对象，但以对消息发送方透明的方式关联这些对象</p>
<h5 id="Surrogate-Objects-代替对象"><a href="#Surrogate-Objects-代替对象" class="headerlink" title="Surrogate Objects(代替对象)"></a>Surrogate Objects(代替对象)</h5><p>转发不仅模仿多重继承，还使得开发表示或“覆盖”更实质对象的轻量级对象成为可能。</p>
<p>在Objective-C编程语言的“远程消息”中讨论的代理是这样的surrogate(代理)。代理负责将消息转发到远程接收器的管理细节，确保在连接上复制和检索参数值，等等。但它不试图做许多其他;它不重复远程对象的功能，而只是给远程对象一个本地地址，它可以在另一个应用程序中接收消息。</p>
<p>其他类型的替代对象也是可能的。假设，例如，你有一个对象操纵大量的数据 - 或许它创建一个复杂的图像或读取磁盘上的文件的内容。将此对象设置为向上可能是耗时的，所以你更喜欢做它懒惰 - 当它真的需要或当系统资源暂时空闲时。同时，您至少需要一个此对象的占位符，以便应用程序中的其他对象正常工作。</p>
<p>在这种情况下，你最初可以创建，不是完整的对象，是一个轻量级的代理。这个对象可以自己做一些事情，例如回答有关数据的问题，但大多数情况下，它只是为较大的对象保存一个地方，当时间到来时，转发消息给它。当代理的<code>forwardInvocation：</code>方法首先接收到目的地为另一个对象的消息时，它将确保该对象存在，并且如果它不存在则将创建它。对于较大对象的所有消息通过代理，因此，就程序的其余部分而言，代理和较大对象将是相同的。</p>
<h5 id="Forwarding-and-Inheritance-转发和继承"><a href="#Forwarding-and-Inheritance-转发和继承" class="headerlink" title="Forwarding and Inheritance(转发和继承)"></a>Forwarding and Inheritance(转发和继承)</h5><p>虽然转发模仿继承，NSObject类从不混淆两者。 像<code>responsesToSelector：</code>和<code>isKindOfClass</code>这样的方法：只看继承层次结构，从不看转发链。 例如，如果一个Warrior对象被询问是否响应negotiate消息，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">if ( [aWarrior respondsToSelector:@selector(negotiate)] )</div><div class="line">    ...</div></pre></td></tr></table></figure>
<p>答案是否定的，即使它可以无误地接收negotiate消息，并在某种意义上通过将它们转发给Diplomat来对它们作出响应。</p>
<p>在许多情况下，NO是正确的答案。 但它可能不是。 如果使用转发来设置代理对象或扩展类的功能，则转发机制应该像继承一样透明。 如果你想让对象的行为好像真的继承了他们转发消息的对象的行为，你需要重新实现<code>responsesToSelector：</code>和<code>isKindOfClass：</code>方法来包含你的转发算法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (BOOL)respondsToSelector:(SEL)aSelector</div><div class="line">&#123;</div><div class="line">    if ( [super respondsToSelector:aSelector] )</div><div class="line">        return YES;</div><div class="line">    else &#123;</div><div class="line">        /* Here, test whether the aSelector message can     *</div><div class="line">         * be forwarded to another object and whether that  *</div><div class="line">         * object can respond to it. Return YES if it can.  */</div><div class="line">    &#125;</div><div class="line">    return NO;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除了<code>responsesToSelector：</code>和<code>isKindOfClass：</code>，<code>instancesRespondToSelector：</code>方法也应该镜像转发算法。 如果使用协议，那么也应该将<code>conformsToProtocol：</code>方法添加到列表中。 类似地，如果一个对象转发它接收的任何远程消息，它应该有一个版本的<code>methodSignatureForSelector：</code>它可以返回最终响应转发消息的方法的准确描述; 例如，如果对象能够将消息转发到其代理，则可以实现<code>methodSignatureForSelector：</code>如下所示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (NSMethodSignature*)methodSignatureForSelector:(SEL)selector</div><div class="line">&#123;</div><div class="line">    NSMethodSignature* signature = [super methodSignatureForSelector:selector];</div><div class="line">    if (!signature) &#123;</div><div class="line">       signature = [surrogate methodSignatureForSelector:selector];</div><div class="line">    &#125;</div><div class="line">    return signature;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你可能会考虑把转发算法放在私人代码中，并由<code>forwardInvocation：included</code>，调用它。</p>
<p>注意：这是一种高级技术，仅适用于没有其他解决方案的情况。 它不是作为继承的替代。 如果你必须使用这种技术，请确保你完全理解类的行为做转发和你转发的类。</p>
<p>本节中提到的方法在Foundation框架参考中的NSObject类规范中进行了描述。 有关invokeWithTarget：的信息，请参阅Foundation框架参考中的<a href="https://developer.apple.com/reference/foundation/nsinvocation" target="_blank" rel="external">NSInvocation</a>类规范。</p>
<h3 id="Declared-Properties-声明属性"><a href="#Declared-Properties-声明属性" class="headerlink" title="Declared Properties(声明属性)"></a>Declared Properties(声明属性)</h3><p>当编译器遇到属性声明（请参阅Objective-C编程语言中的声明属性）时，它会生成与封闭类，类别或协议相关联的描述性元数据。 您可以使用支持按类名或协议的名称查找属性的@encode字符串获取属性的类型，以及将属性属性的列表复制为C字符串数组的函数来访问此元数据。 每个类和协议都有一个声明的属性列表。</p>
<h5 id="Property-Type-and-Functions-属性类型和函数"><a href="#Property-Type-and-Functions-属性类型和函数" class="headerlink" title="Property Type and Functions(属性类型和函数)"></a>Property Type and Functions(属性类型和函数)</h5><p>Property结构定义了属性描述符的不透明句柄</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_property *Property;</div></pre></td></tr></table></figure>
<p>您可以使用函数<code>class_copyPropertyList</code>和<code>protocol_copyPropertyList</code>来检索与类（包括加载的类别）和协议相关联的属性的数组：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">objc_property_t *class_copyPropertyList(Class cls, unsigned int *outCount)</div><div class="line">objc_property_t *protocol_copyPropertyList(Protocol *proto, unsigned int *outCount)</div></pre></td></tr></table></figure>
<p>例如，给定以下类声明</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@interface Lender : NSObject &#123;</div><div class="line">    float alone;</div><div class="line">&#125;</div><div class="line">@property float alone;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>您可以使用以下方式获取属性列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">id LenderClass = objc_getClass(&quot;Lender&quot;);</div><div class="line">unsigned int outCount;</div><div class="line">objc_property_t *properties = class_copyPropertyList(LenderClass, &amp;outCount);</div></pre></td></tr></table></figure>
<p>您可以使用property_getName函数来发现属性的名称：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const char *property_getName(objc_property_t property)</div></pre></td></tr></table></figure>
<p>您可以使用函数class_getProperty和protocol_getProperty来获取对类和协议中给定名称的属性的引用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">objc_property_t class_getProperty(Class cls, const char *name)</div><div class="line">objc_property_t protocol_getProperty(Protocol *proto, const char *name, BOOL isRequiredProperty, BOOL isInstanceProperty)</div></pre></td></tr></table></figure>
<p>您可以使用property_getAttributes函数来发现属性的名称和@encode类型字符串。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const char *property_getAttributes(objc_property_t property)</div></pre></td></tr></table></figure>
<p>将这些组合在一起，您可以使用以下代码打印与类关联的所有属性的列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">id LenderClass = objc_getClass(&quot;Lender&quot;);</div><div class="line">unsigned int outCount, i;</div><div class="line">objc_property_t *properties = class_copyPropertyList(LenderClass, &amp;outCount);</div><div class="line">for (i = 0; i &lt; outCount; i++) &#123;</div><div class="line">    objc_property_t property = properties[i];</div><div class="line">    fprintf(stdout, &quot;%s %s\n&quot;, property_getName(property), property_getAttributes(property));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="Property-Type-String-属性类型字符串"><a href="#Property-Type-String-属性类型字符串" class="headerlink" title="Property Type String(属性类型字符串)"></a>Property Type String(属性类型字符串)</h5><p>您可以使用property_getAttributes函数来发现名称，属性的@encode类型字符串和属性的其他属性。</p>
<p>该字符串以一个T开头，后面跟着@encode类型和一个逗号，最后是一个V，后面跟着背景实例变量的名字。 在这些属性之间，属性由以下描述符指定，用逗号分隔</p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;今天照着文档来说说runtime-看到一半看不下去了-怪自己英文不好-…先写下来慢慢理解-然后在看下半部分&quot;&gt;&lt;a href=&quot;#今天照着文档来说说runtime-看到一半看不下去了-怪自己英文不好-…先写下来慢慢理解-然后在看下半部分&quot; class=&quot;heade
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>个人博客的创建</title>
    <link href="https://blaceman.github.io/2016/12/06/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%88%9B%E5%BB%BA/"/>
    <id>https://blaceman.github.io/2016/12/06/个人博客的创建/</id>
    <published>2016-12-06T10:46:03.000Z</published>
    <updated>2016-12-27T07:03:10.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="最近失业-有点无聊-折腾一下博客-然后把自己所折腾的事记录下来-加深印象"><a href="#最近失业-有点无聊-折腾一下博客-然后把自己所折腾的事记录下来-加深印象" class="headerlink" title="最近失业,有点无聊,折腾一下博客,然后把自己所折腾的事记录下来,加深印象~"></a>最近失业,有点无聊,折腾一下博客,然后把自己所折腾的事记录下来,加深印象~</h4><h4 id="首先来首歌"><a href="#首先来首歌" class="headerlink" title="首先来首歌"></a>首先来首歌</h4><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="https://music.163.com/outchain/player?type=2&id=32507038&auto=1&height=66"></iframe>


<h4 id="这篇文章大概说了以下这几个方面"><a href="#这篇文章大概说了以下这几个方面" class="headerlink" title="这篇文章大概说了以下这几个方面"></a>这篇文章大概说了以下这几个方面</h4><ol>
<li>为mac电脑安装<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo</a></li>
<li>基于github安装静态页面的Hexo博客</li>
<li>MarkDown常见的用法</li>
</ol>
<h3 id="1-为mac电脑安装Hexo"><a href="#1-为mac电脑安装Hexo" class="headerlink" title="1.为mac电脑安装Hexo"></a>1.为mac电脑安装<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo</a></h3><h4 id="首先Hexo一款基于Node-js的静态博客框架，可以生成静态文件并且一键部署到github-pages上，并且他可以使用markdown来编写文章，十分简单。所以安装Hexo的前提必须是要安装Node-JS和Git而Node-JS的最佳安装方式是使用nvm-Node的管理工具"><a href="#首先Hexo一款基于Node-js的静态博客框架，可以生成静态文件并且一键部署到github-pages上，并且他可以使用markdown来编写文章，十分简单。所以安装Hexo的前提必须是要安装Node-JS和Git而Node-JS的最佳安装方式是使用nvm-Node的管理工具" class="headerlink" title="首先Hexo一款基于Node.js的静态博客框架，可以生成静态文件并且一键部署到github pages上，并且他可以使用markdown来编写文章，十分简单。所以安装Hexo的前提必须是要安装Node.JS和Git而Node.JS的最佳安装方式是使用nvm(Node的管理工具)"></a>首先<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo</a>一款基于Node.js的静态博客框架，可以生成静态文件并且一键部署到github pages上，并且他可以使用markdown来编写文章，十分简单。所以安装Hexo的前提必须是要安装Node.JS和Git而Node.JS的最佳安装方式是使用nvm(Node的管理工具)</h4><p>1.安装Git</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 安装 HomeBrew(一款软件包管理工具)</div><div class="line"> $ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div><div class="line"> $ brew install git   // 安装Git</div></pre></td></tr></table></figure>
<p>这里给出来HomeBrew的基本用法方便像我这样的小白阅读了解<a href="http://www.cnblogs.com/TankXiao/p/3247113.html#brewother" target="_blank" rel="external">http://www.cnblogs.com/TankXiao/p/3247113.html#brewother</a></p>
<p>2.安装nvm</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1. Homebrew 安装方式，此安装方式无需重启</div><div class="line">$ brew install nvm  </div><div class="line">$ mkdir ~/.nvm</div><div class="line">$ export NVM_DIR=~/.nvm</div><div class="line">$ . $(brew --prefix nvm)/nvm.sh</div><div class="line">2. curl安装方式</div><div class="line">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</div></pre></td></tr></table></figure>
<p>同样这里也列出来nvm的基本用法<a href="http://weizhifeng.net/node-version-management-via-n-and-nvm.html" target="_blank" rel="external">http://weizhifeng.net/node-version-management-via-n-and-nvm.html</a></p>
<p>3.安装Node.JS</p>
<p><code>$ nvm install 4</code></p>
<p>4.最后一步安装Hexo</p>
<p> <code>$ sudo npm install hexo-cli -g</code></p>
<p> 至此,为创建博客做了基础的准备~顺便也给出Hexo的文档参考,参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo</a></p>
<h3 id="2-创建个人博客"><a href="#2-创建个人博客" class="headerlink" title="2.创建个人博客"></a>2.创建个人博客</h3><p>1.Hexo安装完后,创建一个Github仓库,命名为<code>username</code>.github.io <strong>username是username/username.github.io的名字</strong>如果没有不懂Github,就谷歌一下吧,详细就不说</p>
<p>2.hexo 一个文件夹,文件夹名字是可以随便起的…ok,这个文件夹就是管理和发布我们的博客的,我们只需要这里面配置好我们需要的东西</p>
<p><code>hexo init username.github.io</code> </p>
<p>3.打开_config.yml,配置里面的参数的参数 简单说一下这里面的配置,还有许多设置请看<a href="http://www.jianshu.com/p/2b9f202c13fd" target="_blank" rel="external">这里</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">title: blaceman  //博客名字</div><div class="line">subtitle: 懵懂 前进 憧憬 //副标题</div><div class="line">description: 黄昏,一天最美丽的谢幕~ //描述</div><div class="line">author: blaceman //名字</div><div class="line">language: zh-Hans //语言</div><div class="line">url: https://blaceman.github.io //url</div><div class="line">root: /</div><div class="line">theme: new-vno //主题</div><div class="line">deploy:</div><div class="line">  type: git //git 发布</div><div class="line">  repo: https://github.com/blaceman/blaceman.github.io.git  //Git源</div></pre></td></tr></table></figure>
<p>4.配置好之后,如果觉得主题丑的话,就换一下主题吧,默认是landscape hexo的众多主题<a href="https://hexo.io/themes/" target="_blank" rel="external">在这</a>,而我的主题是<a href="https://github.com/monniya/hexo-theme-new-vno" target="_blank" rel="external">这</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd username.github.io</div><div class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next //next主题</div></pre></td></tr></table></figure>
<p>clone好之后 修改博客的_config.yml中的主题<code>theme: new-vno</code>然后在修改主题里面的_config.yml,next主题的教程<a href="http://theme-next.iissnan.com/getting-started.html#theme-settings" target="_blank" rel="external">在这</a></p>
<p>5.测试</p>
<p><code>$ hexo s</code></p>
<p> 测试服务启动，你可以在浏览器中输入<a href="https://localhost:4000" target="_blank" rel="external">https://localhost:4000</a> 访问了。觉得没问题后就可以发布了</p>
<p>6.安装hexo-deployer-git自动部署发布工具</p>
<p><code>$ npm install hexo-deployer-git --save</code></p>
<p>7.发布</p>
<p><code>$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p>
<p>到这一步在浏览器输入<a href="https://username.github.io" target="_blank" rel="external">https://username.github.io</a> 就可以看到你创建的博客了…</p>
<p>8.编写文章</p>
<p><code>hexo new &quot;文章名字&quot;</code></p>
<p>就在~/source/_post创建了你的.md之后你就可以用MarkDown大肆发挥了,写完后记得再次发布<br><code>$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code> </p>
<p>好了,创建博客的步骤差不多就结束了,你还可以为博客添加<strong>百度统计 谷歌统计 多说 disqueue 等第三方的东西</strong>至于怎么弄,百度一下就好~</p>
<h3 id="3-MarkDown常见的用法"><a href="#3-MarkDown常见的用法" class="headerlink" title="3.MarkDown常见的用法"></a>3.MarkDown常见的用法</h3><p>1.常见<a href="http://www.csdn.net/article/2014-05-05/2819623" target="_blank" rel="external">MarkDowm编辑器</a>挑一个自己喜欢的就好</p>
<p>2.基本用法,我就不在写一次了,入门<a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="external">在这</a>详细<a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">在这</a></p>
<h3 id="完…"><a href="#完…" class="headerlink" title="完…"></a>完…</h3>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;最近失业-有点无聊-折腾一下博客-然后把自己所折腾的事记录下来-加深印象&quot;&gt;&lt;a href=&quot;#最近失业-有点无聊-折腾一下博客-然后把自己所折腾的事记录下来-加深印象&quot; class=&quot;headerlink&quot; title=&quot;最近失业,有点无聊,折腾一下博客,然后把
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello world</title>
    <link href="https://blaceman.github.io/2016/11/29/12345/"/>
    <id>https://blaceman.github.io/2016/11/29/12345/</id>
    <published>2016-11-29T09:29:34.000Z</published>
    <updated>2016-12-27T06:48:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
